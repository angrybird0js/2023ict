{"ast":null,"code":"var _jsxFileName = \"/Users/hongseonghyeon/lab_readbook/2023ict/bprj/src/pages/Bookintro/index.jsx\",\n  _s2 = $RefreshSig$();\n//라우터의 /:id 값을 받아와야 한다.\n//330p.\n// import dotenv from \"dotenv\";\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Header from \"../../components/Header\";\nimport axios from 'axios';\n// import dummy from '../public/books.json';\n// dotenv.config();\n\n// props 대신 라우터에서 받아야 한다.\n// 표시방법을 변경하여 DB에서 자료를 받아오도록 한다.\n\n// 백엔드 라우터\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Bookintro = () => {\n  _s2();\n  // const blst = JSON.stringify(dummy);\n  // fetch의 url은 dotenv 처리해야 한다.\n\n  const [bookdata, setBookdata] = useState([]);\n  useEffect(() => {\n    var _s = $RefreshSig$();\n    const fetchdata = async () => {\n      _s();\n      try {\n        const param = useParams(); // 라우터의 파라미터를 받는다.\n\n        // axios 사용\n        // mypage에서 토큰을 넘긴다.\n        const resp = await axios.get(`${process.env.BHOST}/selectbook/:id`, {\n          bookid: param.id\n        })\n        // const resp = await axios.get('http://localhost:8080/selectbook')\n        // 전체 조회\n        .catch(console.error);\n        setBookdata(resp.data); // 정상\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    _s(fetchdata, \"robhGa1ZC4zviMRLk6t/NW5RpXI=\", false, function () {\n      return [useParams];\n    });\n    fetchdata();\n  }, []);\n  console.log(\"State: \", bookdata);\n\n  // 331p. 문자열을 숫자로 교체해야 한다.\n  // const bdata = blst[param.id];\n  const bdata = bookdata[param.id]; // 프론트 라우터 get id와 DB 대조\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-container\",\n      children: /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [bdata.title, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Description\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uB85C\\uADF8\\uC778\\uD574\\uC57C \\uCC45\\uC744 \\uC77D\\uC744\\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s2(Bookintro, \"t6WFAdsRQNNl9xujexHKxZA7w18=\");\n_c = Bookintro;\nexport default Bookintro;\nvar _c;\n$RefreshReg$(_c, \"Bookintro\");","map":{"version":3,"names":["useState","useEffect","useParams","Header","axios","jsxDEV","_jsxDEV","Bookintro","_s2","bookdata","setBookdata","_s","$RefreshSig$","fetchdata","param","resp","get","process","env","BHOST","bookid","id","catch","console","error","data","e","log","bdata","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","_c","$RefreshReg$"],"sources":["/Users/hongseonghyeon/lab_readbook/2023ict/bprj/src/pages/Bookintro/index.jsx"],"sourcesContent":["\n//라우터의 /:id 값을 받아와야 한다.\n//330p.\n// import dotenv from \"dotenv\";\nimport { useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom';\nimport Header from \"../../components/Header\";\n\nimport axios from 'axios';\n// import dummy from '../public/books.json';\n// dotenv.config();\n\n// props 대신 라우터에서 받아야 한다.\n// 표시방법을 변경하여 DB에서 자료를 받아오도록 한다.\n\n\n// 백엔드 라우터\nconst Bookintro = () => {\n  // const blst = JSON.stringify(dummy);\n  // fetch의 url은 dotenv 처리해야 한다.\n\n  const [bookdata, setBookdata] = useState([]);\n\n  useEffect(() => {\n    const fetchdata = async () => {\n      try {\n        const param = useParams(); // 라우터의 파라미터를 받는다.\n\n        // axios 사용\n        // mypage에서 토큰을 넘긴다.\n        const resp = await axios.get(`${process.env.BHOST}/selectbook/:id`,\n          { bookid: param.id })\n          // const resp = await axios.get('http://localhost:8080/selectbook')\n          // 전체 조회\n          .catch(console.error)\n        setBookdata(resp.data) // 정상\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    fetchdata();\n\n  }, [])\n\n\n  console.log(\"State: \", bookdata)\n\n  // 331p. 문자열을 숫자로 교체해야 한다.\n  // const bdata = blst[param.id];\n  const bdata = bookdata[param.id]; // 프론트 라우터 get id와 DB 대조\n\n  return (\n    <div className=\"home-container\">\n      <div className=\"header-container\">\n        <Header />\n      </div>\n\n      <h1>{bdata.title} </h1>\n\n      <h2>Description</h2>\n      <p>로그인해야 책을 읽을수 있습니다.</p>\n    </div>\n  );\n};\n\nexport default Bookintro;"],"mappings":";;AACA;AACA;AACA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,MAAM,MAAM,yBAAyB;AAE5C,OAAOC,KAAK,MAAM,OAAO;AACzB;AACA;;AAEA;AACA;;AAGA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACtB;EACA;;EAEA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE5CC,SAAS,CAAC,MAAM;IAAA,IAAAU,EAAA,GAAAC,YAAA;IACd,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAAAF,EAAA;MAC5B,IAAI;QACF,MAAMG,KAAK,GAAGZ,SAAS,CAAC,CAAC,CAAC,CAAC;;QAE3B;QACA;QACA,MAAMa,IAAI,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,KAAM,iBAAgB,EAChE;UAAEC,MAAM,EAAEN,KAAK,CAACO;QAAG,CAAC;QACpB;QACA;QAAA,CACCC,KAAK,CAACC,OAAO,CAACC,KAAK,CAAC;QACvBd,WAAW,CAACK,IAAI,CAACU,IAAI,CAAC,EAAC;MACzB,CAAC,CAAC,OAAOC,CAAC,EAAE;QACVH,OAAO,CAACI,GAAG,CAACD,CAAC,CAAC;MAChB;IACF,CAAC;IAACf,EAAA,CAfIE,SAAS;MAAA,QAEGX,SAAS;IAAA;IAc3BW,SAAS,CAAC,CAAC;EAEb,CAAC,EAAE,EAAE,CAAC;EAGNU,OAAO,CAACI,GAAG,CAAC,SAAS,EAAElB,QAAQ,CAAC;;EAEhC;EACA;EACA,MAAMmB,KAAK,GAAGnB,QAAQ,CAACK,KAAK,CAACO,EAAE,CAAC,CAAC,CAAC;;EAElC,oBACEf,OAAA;IAAKuB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7BxB,OAAA;MAAKuB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,eAC/BxB,OAAA,CAACH,MAAM;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC,eAEN5B,OAAA;MAAAwB,QAAA,GAAKF,KAAK,CAACO,KAAK,EAAC,GAAC;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEvB5B,OAAA;MAAAwB,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpB5B,OAAA;MAAAwB,QAAA,EAAG;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEV,CAAC;AAAC1B,GAAA,CA9CID,SAAS;AAAA6B,EAAA,GAAT7B,SAAS;AAgDf,eAAeA,SAAS;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}