{"ast":null,"code":"var _jsxFileName = \"/Users/hongseonghyeon/lab_readbook/2023ict/bprj/src/pages/LoginPage/index.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport axios from 'axios'; // Axios를 사용하여 HTTP 요청을 보낼 수 있도록 불러옵니다.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginPage = () => {\n  _s();\n  const [userId, setUserId] = useState('');\n  const [password, setPassword] = useState('');\n  const handleLogin = async () => {\n    try {\n      // 사용자 입력을 JSON 형태로 만듭니다.\n      const userData = {\n        userId,\n        password\n      };\n\n      // Axios를 사용하여 POST 요청을 보냅니다.\n      const response = await axios.post('http://localhost:8080/login', userData);\n      if (response.success) {\n        console.log('Login successful!', response.data);\n        console.log(response.data.token);\n        window.localStorage.setItem(\"token\", response.data.token);\n        // 로그인 성공 시 홈 페이지로 리다이렉션\n        window.location.href = '/';\n      } else {\n        // 로그인 실패 시 메시지를 처리하는 코드\n        // ...\n      }\n\n      // 응답을 확인하고 로그인이 성공했으면 알림 등을 표시할 수 있습니다.\n    } catch (error) {\n      console.error('Error during login:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Username:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userId,\n        onChange: e => setUserId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Password:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: password,\n        onChange: e => setPassword(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleLogin,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginPage, \"AjH1B2l/Zfxx8K6HbkX7iteJY2E=\");\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["useState","axios","jsxDEV","_jsxDEV","LoginPage","_s","userId","setUserId","password","setPassword","handleLogin","userData","response","post","success","console","log","data","token","window","localStorage","setItem","location","href","error","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/hongseonghyeon/lab_readbook/2023ict/bprj/src/pages/LoginPage/index.jsx"],"sourcesContent":["import { useState } from 'react';\nimport axios from 'axios'; // Axios를 사용하여 HTTP 요청을 보낼 수 있도록 불러옵니다.\n\nconst LoginPage = () => {\n  const [userId, setUserId] = useState('');\n  const [password, setPassword] = useState('');\n  \n\n  const handleLogin = async () => {\n    try {\n      \n      // 사용자 입력을 JSON 형태로 만듭니다.\n      const userData = {\n        userId,\n        password,\n      };\n    \n      // Axios를 사용하여 POST 요청을 보냅니다.\n      const response = await axios.post('http://localhost:8080/login', userData);\n\n\n      if (response.success) {\n        \n        console.log('Login successful!', response.data);\n        console.log(response.data.token)\n        window.localStorage.setItem(\"token\", response.data.token);\n        // 로그인 성공 시 홈 페이지로 리다이렉션\n        window.location.href = '/';\n  \n      } else {\n        // 로그인 실패 시 메시지를 처리하는 코드\n        // ...\n      }\n      \n      // 응답을 확인하고 로그인이 성공했으면 알림 등을 표시할 수 있습니다.\n\n\n    } catch (error) {\n      console.error('Error during login:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Login Page</h2>\n      <form>\n        <label>Username:</label>\n        <input\n          type=\"text\"\n          value={userId}\n          onChange={(e) => setUserId(e.target.value)}\n        />\n        <br />\n        <label>Password:</label>\n        <input\n          type=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n        <br />\n        <button type=\"button\" onClick={handleLogin}>\n          Login\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default LoginPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}